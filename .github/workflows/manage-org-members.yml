name: Manage Organization Members

on:
  workflow_dispatch: 

jobs:
  manage-members:
    runs-on: ubuntu-latest

    steps:
      - name: Convert App token
        id: create_token
        uses: getsentry/action-github-app-token@v3.0.0
        with:
          app_id: ${{ vars.FSDH_TEAM_ADMIN_APP_ID }}
          private_key: ${{ secrets.FSDH_TEAM_ADMIN_APP_KEY }}

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        run: gh auth login --with-token <<< "${{ steps.create_token.outputs.token }}"

      - name: Set membership
        run: |        
          org_membership="./.github/workflows/org-membership/members.json"
          
          if [[ ! -f "$org_membership" ]]; then
            echo "Error: members.json file not found at $org_membership"
            exit 1
          fi
          
          # Read JSON file and set membership
          members=$(jq -c '.members[]' "$org_membership") || {
            echo "Error: Failed to parse $org_membership"
            exit 1
          }

          failed_invites=false

          for member in $members; do
            email=$(echo "$member" | jq -r '.email')
            role=$(echo "$member" | jq -r '.role')

            # Echo each user being processed
            echo "Processing user: $email with role: $role"

            retry_count=0
            max_retries=3

            while [[ $retry_count -lt $max_retries ]]; do

              # Invite member to the organization and capture response
              response=$(gh api --method POST \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/orgs/${{ github.repository_owner }}/invitations" \
                -f "email=$email" -f "role=$role" 2>/dev/null ) || true


              # Check if response contains status and specific error message using jq
              status=$(echo "$response" | jq -r '.status // empty')
              error_message=$(echo "$response" | jq -r '.errors[0].message // empty')

              if [[ "$status" == "201" || "$status" == "200" ]]; then
                echo "User $email invited successfully."
                break
              elif [[ "$status" == "422" && "$error_message" == "A user with this email addresss is already a part of this organization" ]]; then
                echo "User $email is already a member."
                break
              else
                echo "Retrying for user $email. Attempt #$((retry_count + 1))"
                retry_count=$((retry_count + 1))
                sleep $((retry_count * 2))
              fi

              if [[ $retry_count -eq $max_retries ]]; then
                echo "Failed to invite $email after $max_retries attempts. Response: $response"
                failed_invites=true
              fi
            done
          done

          if [[ "$failed_invites" == true ]]; then
            echo "Some invites failed. Please check the logs for details."
            exit 1
          fi
