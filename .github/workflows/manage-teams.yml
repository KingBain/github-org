name: Manage Teams from JSON

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight

jobs:
  manage-teams:
    runs-on: ubuntu-latest

    steps:
      - name: Convert App token
        id: create_token
        uses: getsentry/action-github-app-token@v3.0.0
        with:
          app_id: ${{ vars.FSDH_TEAM_ADMIN_APP_ID }}
          private_key: ${{ secrets.FSDH_TEAM_ADMIN_APP_KEY }}

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        run: gh auth login --with-token <<< "${{ steps.create_token.outputs.token }}"

      - name: Find and Parse Team JSON Files
        env:
          GH_TOKEN: ${{ steps.create_token.outputs.token }}
        run: |
          team_files=$(find ./.github/workflows/team-configs -name '*.json')
          echo "$team_files" | tr ' ' '\n' | while read -r team_file; do
            team=$(cat "$team_file")
            TEAM_NAME=$(echo "$team" | jq -r '.name')
            TEAM_DESCRIPTION=$(echo "$team" | jq -r '.description // ""')
            TEAM_MEMBERS=$(echo "$team" | jq -c '.members')

            # Create or update the team
            if gh api orgs/${ORG_NAME}/teams/$TEAM_NAME --silent; then
              echo "Updating team $TEAM_NAME..."
              gh api -X PATCH \
                orgs/${ORG_NAME}/teams/$TEAM_NAME \
                -F name="$TEAM_NAME" \
                -F description="$TEAM_DESCRIPTION" \
                -F privacy="closed"
            else
              echo "Creating team $TEAM_NAME..."
              gh api -X POST \
                orgs/${ORG_NAME}/teams \
                -F name="$TEAM_NAME" \
                -F description="$TEAM_DESCRIPTION" \
                -F privacy="closed"
            fi

            # Get current members of the team
            current_members=$(gh api orgs/${ORG_NAME}/teams/$TEAM_NAME/members --jq '.[].login')

            # Add new members or update existing ones
            echo "$TEAM_MEMBERS" | jq -c '.[]' | while read -r member; do
              username=$(echo "$member" | jq -r '.username')
              role=$(echo "$member" | jq -r '.role // "member"')
              echo "Adding/updating member $username with role $role..."
              gh api -X PUT \
                orgs/${ORG_NAME}/teams/$TEAM_NAME/memberships/$username \
                -f role="$role"
            done

            # Remove members who are not in the JSON file
            for member in $current_members; do
              if ! echo "$TEAM_MEMBERS" | jq -e --arg member "$member" '.[] | select(.username == $member)' > /dev/null; then
                echo "Removing member $member from team $TEAM_NAME..."
                gh api -X DELETE \
                  orgs/${ORG_NAME}/teams/$TEAM_NAME/memberships/$member
              fi
            done
          done
